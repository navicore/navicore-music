name: Fresh Database Install

on:
  workflow_dispatch:
    inputs:
      confirm_delete:
        description: 'Type "DELETE-EVERYTHING" to confirm complete database deletion'
        required: true
        type: string

jobs:
  fresh-install:
    name: Complete Fresh Install
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_delete }}" != "DELETE-EVERYTHING" ]; then
            echo "‚ùå You must type 'DELETE-EVERYTHING' to proceed!"
            exit 1
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Wrangler
        run: npm install -g wrangler
      
      - name: Delete existing database
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üóëÔ∏è Deleting existing database completely..."
          
          # Delete the database entirely using the API
          curl -X DELETE \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/d1/database/c09c462b-e2f1-420d-a3fa-d0e8bc19736e" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" || echo "Database might not exist"
          
          echo "‚è≥ Waiting for deletion to complete..."
          sleep 10
      
      - name: Create new database
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üÜï Creating fresh database..."
          
          # Create new database with the same name
          RESPONSE=$(curl -X POST \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/d1/database" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"name": "navicore-music"}')
          
          echo "Response: $RESPONSE"
          
          # Extract the new database ID
          NEW_DB_ID=$(echo $RESPONSE | jq -r '.result.uuid')
          
          if [ "$NEW_DB_ID" != "null" ] && [ -n "$NEW_DB_ID" ]; then
            echo "‚úÖ New database created with ID: $NEW_DB_ID"
            echo "‚ö†Ô∏è IMPORTANT: Update wrangler.toml with new database_id: $NEW_DB_ID"
          else
            echo "‚ùå Failed to create database"
            exit 1
          fi
          
          echo "‚è≥ Waiting for database to be ready..."
          sleep 20
      
      - name: Initialize schema
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üìù Initializing fresh schema..."
          
          # Execute the schema file
          wrangler d1 execute navicore-music --remote --file=schema.sql || {
            echo "‚ö†Ô∏è If this failed, you may need to update wrangler.toml with the new database ID"
            echo "Check the previous step for the new ID"
            exit 1
          }
          
          echo "‚úÖ Schema initialized"
      
      - name: Verify installation
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîç Verifying fresh installation..."
          
          # List all tables
          echo "Tables in new database:"
          wrangler d1 execute navicore-music --remote --command="SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;" || echo "Failed to query tables"
          
          echo ""
          echo "üìä Fresh Install Complete!"
          echo "========================"
          echo "Next steps:"
          echo "1. If a new database ID was generated, update wrangler.toml"
          echo "2. Commit and push any changes"
          echo "3. Deploy the worker"
          echo "========================"