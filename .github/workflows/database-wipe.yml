name: Complete Database Wipe and Recreate

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "WIPE-DATABASE" to confirm'
        required: true
        type: string

jobs:
  wipe-database:
    name: Wipe and Recreate Database
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "WIPE-DATABASE" ]; then
            echo "‚ùå You must type 'WIPE-DATABASE' to proceed!"
            exit 1
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Wrangler
        run: npm install -g wrangler
      
      - name: Execute database wipe
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üóëÔ∏è Wiping database..."
          
          # Execute the wipe script
          if ! wrangler d1 execute navicore-music --remote --file=wipe-database.sql; then
            echo "‚ùå Failed to execute wipe script, trying individual commands..."
            
            # Try dropping tables one by one
            for TABLE in play_history playlist_tracks track_tags album_tags tracks albums tags playlists users migrations; do
              echo "Dropping $TABLE..."
              wrangler d1 execute navicore-music --remote --command="DROP TABLE IF EXISTS $TABLE;" || echo "Failed to drop $TABLE"
            done
          fi
          
          echo "‚úÖ Database wipe completed"
      
      - name: Create fresh schema
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üìù Creating fresh schema..."
          
          # Execute the schema file
          wrangler d1 execute navicore-music --remote --file=schema.sql
          
          echo "‚úÖ Schema created"
      
      - name: Verify clean state
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîç Verifying database state..."
          
          echo "Tables in database:"
          wrangler d1 execute navicore-music --remote --command="SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' AND name NOT LIKE '_cf_%' ORDER BY name;" --json | jq -r '.result[0].results[].name' || echo "Failed to list tables"
          
          echo ""
          echo "Checking tracks table structure:"
          wrangler d1 execute navicore-music --remote --command="PRAGMA table_info(tracks);" --json | jq '.result[0].results[]' || echo "Failed to get tracks info"
          
          echo ""
          echo "Checking if tags column exists in tracks:"
          wrangler d1 execute navicore-music --remote --command="PRAGMA table_info(tracks);" --json | jq -r '.result[0].results[] | select(.name == "tags")' || echo "No tags column found (this is good!)"
          
          echo ""
          echo "CRITICAL: Checking if any tracks remain in database:"
          TRACK_COUNT=$(wrangler d1 execute navicore-music --remote --command="SELECT COUNT(*) as count FROM tracks;" --json | jq -r '.result[0].results[0].count' || echo "0")
          echo "Track count: $TRACK_COUNT"
          
          if [ "$TRACK_COUNT" != "0" ] && [ -n "$TRACK_COUNT" ]; then
            echo "‚ùå ERROR: Database still contains $TRACK_COUNT tracks!"
            echo "Attempting to show first few tracks:"
            wrangler d1 execute navicore-music --remote --command="SELECT id, title, artist FROM tracks LIMIT 5;" --json | jq '.result[0].results[]' || echo "Failed to list tracks"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ Database recreated successfully and verified empty!"